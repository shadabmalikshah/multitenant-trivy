name: Laravel PHP Security & Docker Scan

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  security-scan:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up PHP
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, pdo, pdo_mysql, zip
          coverage: none

      # Install Composer dependencies
      - name: Install Composer dependencies
        run: composer install --no-dev --prefer-dist --no-interaction --optimize-autoloader

      # Install Trivy CLI
      - name: Install Trivy CLI
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.66.0
          trivy --version

      # Restore Trivy DB cache
      - name: Restore Trivy DB cache
        uses: actions/cache@v4
        with:
          path: .cache/trivy
          key: trivy-db-${{ runner.os }}-v1
          restore-keys: |
            trivy-db-${{ runner.os }}-

      # Scan PHP dependencies - JSON
      - name: Scan PHP dependencies (composer.lock)
        run: |
          mkdir -p trivy-reports
          trivy fs . \
            --security-checks vuln \
            --ignore-unfixed \
            --format json \
            --output trivy-reports/php-deps.json || true

      # Convert PHP JSON to HTML Table
      - name: Convert PHP JSON to HTML Table
        run: |
          echo "<html><body><h2>PHP Dependency Vulnerabilities</h2><table border='1'><tr><th>Target</th><th>Vulnerability ID</th><th>Severity</th><th>Installed Version</th><th>Fixed Version</th><th>Description</th></tr>" > trivy-reports/php-deps.html
          cat trivy-reports/php-deps.json | jq -r '
            .Results[] | select(.Vulnerabilities != null) | . as $r |
            .Vulnerabilities[] |
            "<tr><td>\($r.Target)</td><td>\(.VulnerabilityID)</td><td>\(.Severity)</td><td>\(.InstalledVersion)</td><td>\(.FixedVersion // "-")</td><td>\(.Description)</td></tr>"' \
            >> trivy-reports/php-deps.html
          echo "</table></body></html>" >> trivy-reports/php-deps.html

      # Upload PHP HTML Table to Artifacts
      - name: Upload PHP HTML Table to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: php-deps-html
          path: trivy-reports/php-deps.html

      # Build Docker image
      - name: Build Docker image
        run: docker build -t laravel-movies:latest .

      # Scan Docker image - JSON
      - name: Scan Docker image
        run: |
          mkdir -p trivy-reports
          trivy image laravel-movies:latest \
            --security-checks vuln \
            --ignore-unfixed \
            --format json \
            --output trivy-reports/docker-image.json || true

      # Convert Docker JSON to HTML Table
      - name: Convert Docker JSON to HTML Table
        run: |
          echo "<html><body><h2>Docker Image Vulnerabilities</h2><table border='1'><tr><th>Target</th><th>Vulnerability ID</th><th>Severity</th><th>Installed Version</th><th>Fixed Version</th><th>Description</th></tr>" > trivy-reports/docker-image.html
          cat trivy-reports/docker-image.json | jq -r '
            .Results[] | select(.Vulnerabilities != null) | . as $r |
            .Vulnerabilities[] |
            "<tr><td>\($r.Target)</td><td>\(.VulnerabilityID)</td><td>\(.Severity)</td><td>\(.InstalledVersion)</td><td>\(.FixedVersion // "-")</td><td>\(.Description)</td></tr>"' \
            >> trivy-reports/docker-image.html
          echo "</table></body></html>" >> trivy-reports/docker-image.html

      # Upload Docker HTML Table to Artifacts
      - name: Upload Docker HTML Table to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-html
          path: trivy-reports/docker-image.html

      # Save Docker image as artifact
      - name: Save Docker image as artifact
        run: |
          mkdir -p artifacts
          docker save laravel-movies:latest -o artifacts/laravel-movies.tar

      # Upload Docker image artifact
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: artifacts/laravel-movies.tar
